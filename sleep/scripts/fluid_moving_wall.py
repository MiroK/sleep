# This script aims to compute the flow in a channel with a moving bottom wall
# We use the fluid solver
# Fluid parameters values corresponds to the PVS problem
# pressure difference : 1 mmHg = 1330 dyn/cm2

from sleep.fbb_DD.domain_transfer import transfer_into
from sleep.fbb_DD.solid import solve_solid
from sleep.fbb_DD.fluid import solve_fluid
from sleep.fbb_DD.ale import solve_ale
from sleep.utils import EmbeddedMesh
from sleep.mesh import load_mesh2d
from dolfin import *


# We get the fluid domain mesh from the full PVS mesh
h5_filename = '../mesh/test/fbb_domain.h5'
# The mesh is typically generated by sleep/mesh/fbb_mesh.py
mesh, markers, lookup = load_mesh2d(h5_filename)
cell_f, facet_f = markers
cell_lookup, facet_lookup = lookup['cell'], lookup['facet']
# The mesh has 3 subdomains: corresponding to fluid and two Biot domain. 
# We now split into fluid and solid meshes in order to keep only the fluid mesh
mesh_f = EmbeddedMesh(cell_f, cell_lookup['F'])
mesh_s = EmbeddedMesh(cell_f, (cell_lookup['S1'], cell_lookup['S2']))

# We get the boundary markers
fluid_markers = ('F_left', 'F_bottom', 'F_right', 'I_bottom')
fluid_markers = tuple(facet_lookup[k] for k in fluid_markers)
fluid_bdries = mesh_f.translate_markers(facet_f, fluid_markers)

# Parameters setup ------------------------------------------------ FIXME
mu_F=Constant(7e-3)
#-----------------------------------

fluid_parameters = {'mu': mu_F}


# Setup fem spaces ---------------------------------------------------
Vf_elm = VectorElement('Lagrange', triangle, 2)
Qf_elm = FiniteElement('Lagrange', triangle, 1)
Wf_elm = MixedElement([Vf_elm, Qf_elm])
Wf = FunctionSpace(mesh_f, Wf_elm)

# Setup of boundary conditions ----------------------------------- FIXME

import sympy
ts = sympy.symbols("time")
sin = sympy.sin

amp=1e-4 #cm
f=1 #Hz

functionU = amp*sin(2*pi*f*ts) # displacement
U_vessel = sympy.printing.ccode(functionU)

functionV = sympy.diff(functionU,ts) # velocity
V_vessel = sympy.printing.ccode(functionV)



pf_in = Constant(1330)           # sigma_f.n.n on the inflow F_left boundary
pf_out = Constant(0)           # sigma_f.n.n on the outflow F_right boundary
uf_bottom = Expression(('0','0'), time = 0, degree=2)   # no slip condition + vessel wall at the bottom
uf_top = Expression(('0','0'), time = 0, degree=2)   # no slip condition at the top

# Now we wire up
bcs_fluid = {'velocity': [(facet_lookup['F_bottom'], uf_bottom),
                            ((facet_lookup['I_bottom'], uf_top))],
             'traction': [],  
             'pressure': [(facet_lookup['F_left'], pf_in),
                           (facet_lookup['F_right'], pf_out) ]}


# Get the initial conditions ------------------------------------- FIXME




# Solve fluid steady state

uf_out, pf_out = File('./output/poisseuille/uf.pvd'), File('./output/poisseuille/pf.pvd')


# Solve fluid problem
u_f, p_f = solve_fluid(Wf, f=Constant((0, 0)), bdries=fluid_bdries, bcs=bcs_fluid,
                           parameters=fluid_parameters)
    
u_f.rename("uf", "tmp")
p_f.rename("pf", "tmp")

uf_out << (u_f)
pf_out << (p_f)

